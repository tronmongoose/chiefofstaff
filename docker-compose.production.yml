version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: travel_planner_db
    environment:
      POSTGRES_DB: travel_planner
      POSTGRES_USER: travel_user
      POSTGRES_PASSWORD: travel_password_123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U travel_user -d travel_planner"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: travel_planner_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Backend API
  backend:
    build: .
    container_name: travel_planner_backend
    environment:
      - DATABASE_URL=postgresql://travel_user:travel_password_123@postgres:5432/travel_planner
      - REDIS_URL=redis://redis:6379/0
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
      - AMADEUS_CLIENT_ID=${AMADEUS_CLIENT_ID}
      - AMADEUS_CLIENT_SECRET=${AMADEUS_CLIENT_SECRET}
      - TRAVEL_PAYMENT_WALLET_ADDRESS=${TRAVEL_PAYMENT_WALLET_ADDRESS}
      - COINBASE_API_KEY=${COINBASE_API_KEY}
      - COINBASE_API_SECRET=${COINBASE_API_SECRET}
      - PLATFORM_WALLET_ADDRESS=${PLATFORM_WALLET_ADDRESS}
      - PLATFORM_FEE_PERCENTAGE=${PLATFORM_FEE_PERCENTAGE}
      - PINATA_API_KEY=${PINATA_API_KEY}
      - PINATA_SECRET_KEY=${PINATA_SECRET_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Next.js)
  frontend:
    build:
      context: ./travel-frontend
      dockerfile: Dockerfile
    container_name: travel_planner_frontend
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_APP_NAME=x402 Travel Planner
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: travel_planner_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: 